###<----------------- INPUTS ----------------->###
input {
  pipe {
     type => "sflow"
     command => "sh /var/scripts/sflowtool-wrapper.sh -l -p 6343"
  }
}
###<----------------- FILTERS ----------------->###
filter {
  if [type] == "sflow" {
    if [message] =~ /CNTR/ {
        drop { }
    }
    grok {
        match => [ "message", "%{WORD:SampleType},%{IP:sflow_ReporterIP},%{NUMBER:sflow_inputPort},%{NUMBER:sflow_outputPort},%{GREEDYDATA:sflow_srcMAC},%{GREEDYDATA:sflow_dstMAC},%{WORD:sflow_EtherType},%{NUMBER:sflow_src_vlan},%{NUMBER:sflow_dst_vlan},%{IP:sflow_srcIP},%{IP:sflow_dstIP},%{NUMBER:sflow_IP_Protocol},%{WORD:sflow_IPTOS},%{NUMBER:sflow_IPTTL},%{NUMBER:sflow_srcPort},%{NUMBER:sflow_dstPort},%{DATA:sflow_tcpFlags},%{NUMBER:sflow_PacketSize},%{NUMBER:sflow_IPSize},%{NUMBER:sflow_SampleRate}"]
       # match => [ "message", "%{WORD:Sample_Type},%{IP:Flow_Reporter},%{NUMBER:Input_Port},%{NUMBER:Output_Port},%{GREEDYDATA:Source_MAC},%{GREEDYDATA:Dest_MAC},%{GREEDYDATA},%{NUMBER:Source_Vlan},%{NUMBER:Dest_Vlan},%{IP:Flow_Source},%{IP:Flow_Destination},%{NUMBER:Flow_Protocol},%{WORD},%{NUMBER:IPTTL},%{NUMBER:Flow_Source_Port},%{NUMBER:Flow_Destination_Port},%{WORD},%{NUMBER:Packet_Size},%{NUMBER:IP_Size},%{NUMBER:Mean_Skip_Count}" ]
        #match => [ "message", "%{WORD:Sample_Type},%{IP:Flow_Reporter},%{NUMBER:int_ifIndex},%{NUMBER:int_ifType},%{NUMBER:hyper_ifSpeed},%{NUMBER:int_ifDirection},%{NUMBER:int_ifStatus},%{NUMBER:hyper_ifInOctets},%{NUMBER:int_ifInUcastPkts},%{NUMBER:int_ifInMulticastPkts},%{NUMBER:int_ifInBroadcastPkts},%{NUMBER:int_ifInDiscards},%{NUMBER:int_ifInErrors},%{NUMBER:int_ifInUnknownProtos},%{NUMBER:hyper_ifOutOctets},%{NUMBER:int_ifOutUcastPkts},%{NUMBER:int_ifOutMulticastPkts},%{NUMBER:int_ifOutBroadcastPkts},%{NUMBER:int_ifOutDiscards},%{NUMBER:int_ifOutErrors},%{NUMBER:int_ifPromiscuousMode}" ]
    }
  }

  #geoip {
  #      source => "[Flow_Source]"
  #      target => "Flow_src_geoip"
  #      add_field => [ "[Flow_src_geoip][coordinates]", "%{[Flow_src_geoip][longitude]}" ]
  #      add_field => [ "[Flow_src_geoip][coordinates]", "%{[Flow_src_geoip][latitude]}"  ]
  #      add_tag => [ "sflow" ]
  #}

  geoip {
        source => "[sflow_srcIP]"
        target => "sflow_src_geoip"
        add_field => [ "[sflow_src_geoip][coordinates]", "%{[sflow_src_geoip][longitude]}" ]
        add_field => [ "[sflow_src_geoip][coordinates]", "%{[sflow_src_geoip][latitude]}"  ]
        #add_tag => [ "sflow" ]
  }
  
  geoip {
        source => "[sflow_dstIP]"
        target => "sflow_dst_geoip"
        add_field => [ "[sflow_dst_geoip][coordinates]", "%{[sflow_dst_geoip][longitude]}" ]
        add_field => [ "[sflow_dst_geoip][coordinates]", "%{[sflow_dst_geoip][latitude]}"  ]
        #add_tag => [ "sflow" ]
  }

  #geoip {
  #      source => "[Flow_Destination]"
  #      target => "Flow_dst_geoip"
  #      add_field => [ "[Flow_dst_geoip][coordinates]", "%{[Flow_dst_geoip][longitude]}" ]
  #      add_field => [ "[Flow_dst_geoip][coordinates]", "%{[Flow_dst_geoip][latitude]}"  ]
  #      add_tag => [ "sflow"]
  #}

  mutate {
    #convert => [ "FW_geoip.area_code", "integer" ]
    convert => [ "[sflow_src_geoip][coordinates]", "float" ]
    convert => [ "[sflow_dst_geoip][coordinates]", "float" ]
    #convert => [ "FW_geoip.dma_code", "integer" ]
    #convert => [ "FW_geoip.latitude", "float" ]
    #convert => [ "FW_geoip.longitude", "float" ]
    #convert => [ "Flow_Source_Port", "integer" ]
    convert => [ "sflow_srcPort", "integer" ]
    #convert => [ "Flow_Destination_Port", "integer" ] 
    convert => [ "sflow_dstPort", "integer" ]

    #convert => [ "Packet_Size", "integer" ]
    convert => [ "sflow_PacketSize", "integer" ]
    #convert => [ "IP_Size", "integer" ] 
    convert => [ "sflow_IPSize", "integer" ]
    #convert => [ "Mean_Skip_Count", "integer" ] 
    convert => [ "sflow_SampleRate", "integer" ]
    #convert => [ "hyper_ifSpeed", "integer" ] 
    #convert => [ "hyper_ifInOctets", "integer" ] 
    #convert => [ "int_ifInUcastPkts", "integer" ]
    #convert => [ "int_ifInMulticastPkts", "integer" ]
    #convert => [ "int_ifInBroadcastPkts", "integer" ]
    #convert => [ "int_ifInDiscards", "integer" ]
    #convert => [ "int_ifInErrors", "integer" ]
    #convert => [ "hyper_ifOutOctets", "integer" ]
    #convert => [ "int_ifOutUcastPkts", "integer" ]
    #convert => [ "int_ifOutMulticastPkts", "integer" ]
    #convert => [ "int_ifOutBroadcastPkts", "integer" ]
    #convert => [ "int_ifOutDiscards", "integer" ]
    #convert => [ "int_ifOutErrors", "integer" ] 
  }
}

###<----------------- OUTPUT ----------------->###
output {
    if [type] == "sflow" {
        stdout { codec => rubydebug }
        elasticsearch {
              #node_name => "sflow_logstash"
              #cluster => "elk-cluster"
              hosts => ["elasticsearch:9200"]
            }
    } 
}
