###<----------------- INPUTS ----------------->###
input {
    kafka {
        topic_id => "connect-test"
        zk_connect => "esuser03:2181"
        auto_offset_reset => "smallest"
        codec => "plain"
        type => "sflow"
        consumer_id => "broker2"
        group_id => "sflow-logstash"
        consumer_threads => 2
        }

    #file {
    #    path => "/home/spyuser/trafficPcap/smia2.txt"
    #    #start_position => "beginning"
    #    type => "sflow"
    #    }
}
###<----------------- FILTERS ----------------->###
filter {
  if [type] == "sflow" {
    if [message] =~ /CNTR/ {
        drop { }
    }
    grok {
        match => [ "message", "%{WORD:SampleType},%{IP:sflow_ReporterIP},%{NUMBER:sflow_inputPort},%{NUMBER:sflow_outputPort},%{GREEDYDATA:sflow_srcMAC},%{GREEDYDATA:sflow_dstMAC},%{WORD:sflow_EtherType},%{NUMBER:sflow_src_vlan},%{NUMBER:sflow_dst_vlan},%{IP:sflow_srcIP},%{IP:sflow_dstIP},%{NUMBER:sflow_IP_Protocol},%{WORD:sflow_IPTOS},%{NUMBER:sflow_IPTTL},%{NUMBER:sflow_srcPort},%{NUMBER:sflow_dstPort},%{DATA:sflow_tcpFlags},%{NUMBER:sflow_PacketSize},%{NUMBER:sflow_IPSize},%{NUMBER:sflow_SampleRate},%{NUMBER:sflow_counter}"]
    }

    date {
        match => ["timestamp" , "dd/MMM/yyyy:HH:mm:ss Z"]
    }
  
    translate {
        field => "[sflow_srcIP]"
        destination => "[sflow_NEWsrcIP]"
        dictionary_path => "/home/spyuser/jsonIPmap2.yaml"
        fallback => "%{sflow_srcIP}"
    }

    translate {
        field => "[sflow_dstIP]"
        destination => "[sflow_NEWdstIP]"
        dictionary_path => "/home/spyuser/jsonIPmap2.yaml"
        fallback => "%{sflow_dstIP}"
    }

    #geoip {
    #      source => "sflow_NEWsrcIP"
    #      target => "sflow_srcGeoIP"
    #      add_field => [ "[sflow_srcGeoIP][coordinates]", "%{[sflow_srcGeoIP][longitude]}" ]
    #      add_field => [ "[sflow_srcGeoIP][coordinates]", "%{[sflow_srcGeoIP][latitude]}"  ]
    #      #add_tag => [ "sflow" ]
    #}
    #geoip {
    #      source => "sflow_NEWdstIP"
    #      target => "sflow_dstGeoIP"
    #      add_field => [ "[sflow_dstcGeoIP][coordinates]", "%{[sflow_dstGeoIP][longitude]}" ]
    #      add_field => [ "[sflow_dstGeoIP][coordinates]", "%{[sflow_dstGeoIP][latitude]}"  ]
    #}
 

    mutate {
      convert => [ "sflow_srcPort", "integer" ]
      convert => [ "sflow_dstPort", "integer" ]
      convert => [ "sflow_PacketSize", "integer" ]
      convert => [ "sflow_IPSize", "integer" ]
      convert => [ "sflow_SampleRate", "integer" ]
      convert => [ "sflow_inputPort", "integer" ]
      convert => [ "sflow_outputPort", "integer" ]
      convert => [ "sflow_src_vlan", "integer" ]
      convert => [ "sflow_dst_vlan", "integer" ]
      convert => [ "sflow_IP_Protocol", "integer" ]
      convert => [ "sflow_IPTTL", "integer" ]
      convert => [ "sflow_counter", "integer" ]
      convert => [ "[sflow_srcGeoIP][coordinates]", "float" ]
      convert => [ "[sflow_dstGeoIP][coordinates]", "float" ]
    }
  }
}

###<----------------- OUTPUT ----------------->###
output {
    if [type] == "sflow" {
        stdout { codec => rubydebug }
        elasticsearch {
              hosts => ["esuser04:9200","esuser05:9200"]
              index => "sflow-%{+YYYY.MM.dd}"
              document_type => "sflow"
              template_name => "sflow"
              workers => 2
            }
    } 
}
